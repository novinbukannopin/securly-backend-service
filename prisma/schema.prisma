// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model URL {
  id          Int      @id @default(autoincrement())
  originalUrl String   @unique
  type        LinkType
  score       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Review      Review[]

  @@map("urls")
}

model Review {
  id        Int          @id @default(autoincrement())
  url       URL          @relation(fields: [urlId], references: [id])
  urlId     Int
  reviewer  User         @relation(fields: [userId], references: [id])
  userId    Int
  action    ReviewAction
  reason    String?
  evidence  String?
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("reviews")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String?
  username        String?        @unique
  password        String?
  dob             DateTime?
  language        String?
  role            Role           @default(USER)
  isEmailVerified Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Token           Token[]
  Link            Link[]
  OAuthAccount    OAuthAccount[]
  Review          Review[]

  @@map("users")
}

enum ReviewAction {
  APPROVE
  REQUEST_REVIEW
  REQUEST_UNBLOCK
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model OAuthAccount {
  id        Int      @id @default(autoincrement())
  provider  Provider
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("oauth_accounts")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@map("tokens")
}

model Link {
  id                 Int         @id @default(autoincrement())
  originalUrl        String
  shortCode          String?     @unique
  user               User        @relation(fields: [userId], references: [id])
  userId             Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?
  expiresAt          DateTime?   @db.Date
  expiredRedirectUrl String?
  type               LinkType // Status keamanan link (benign, malicious, dll.)
  score              Float? // Skor prediksi dari deteksi API
  isHidden           Boolean     @default(false) // Menyembunyikan link berbahaya dari pengguna biasa
  Click              Click[]
  TagLink            TagLink[]
  UTM                UTM?
  Analytics          Analytics[]

  @@map("links")
}

model Click {
  id          Int      @id @default(autoincrement())
  link        Link     @relation(fields: [linkId], references: [id])
  linkId      Int
  timestamp   DateTime @default(now())
  geoLocation String?
  deviceType  String?
  referrer    String?

  @@map("clicks")
}

model Analytics {
  id             Int  @id @default(autoincrement())
  link           Link @relation(fields: [linkId], references: [id])
  linkId         Int
  totalClicks    Int  @default(0)
  uniqueVisitors Int  @default(0)
  dailyClicks    Json

  @@map("analytics")
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  TagLink   TagLink[]

  @@map("tags")
}

model TagLink {
  id        Int      @id @default(autoincrement())
  link      Link     @relation(fields: [linkId], references: [id])
  linkId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tag_links")
}

model UTM {
  id        Int       @id @default(autoincrement())
  link      Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    Int       @unique
  source    String? // UTM source
  medium    String? // UTM medium
  campaign  String? // UTM campaign
  term      String? // UTM term
  content   String? // UTM content
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("utms")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum LinkType {
  BENIGN
  MALICIOUS
  DEFACEMENT
  MALWARE
  PHISHING
  BLOCKED
}

enum Provider {
  DEFAULT
  GOOGLE
  GITHUB
}
